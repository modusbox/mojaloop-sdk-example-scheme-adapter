

@startuml
title Mojaloop SDK Interactions
autonumber

participant "DFSP Backend" as backend
participant "ESB/PortX" as esb

box "SDK"
    participant "SDK Inbound Service" as sib
    participant "SDK Outbound Service" as sob
end box
  

participant "Switch" as sw


note over sib, sob: All outbound between SDK and Switch have\nJWS added automatically
note over sib, sob: All inbound from switch have JWS validated

note over sib, sob: Mapping between scheme transaction types and DFSP\ntransaction types
note over sib, sob: JWS and TLS keys managed by SDK

== send money ==

    backend -> sob: POST /transfers
    
    sob -> sw: GET /parties
    sw -> sob: PUT /parties
    sob -> sw: POST /quotes
    sw -> sob: PUT /quotes
    sob -> sw: POST /transfers
    sw -> sob: PUT /transfers
    
    sob -> backend: HTTP 200

== query transfer ==

    backend -> sob: GET /transfers/{ID}
    sob -> sw: GET /transfers/{ID}
    sw -> sob: PUT /transfers/{ID}
    sob -> backend: transfer info

== receive money ==

    sw -> sib: GET /parties
    sib -> esb: GET /parties
    esb -> backend: lookup user account
    backend -> esb: user details
    esb -> sib: user details
    sib -> sw: PUT /parties
    
    sw -> sib: POST /quotes
    
    alt SDK handles quote request autonomously
    
    sib -> sib: calculate quote
    
    else backend calculates quote
    
    sib -> esb: POST /quotes
    esb -> backend: quote request
    backend -> esb: quote response
    esb -> sib: quote response
    
    end
    
    sib -> sib: create ILP packet\ncalculate condition
    
    sib -> sw: PUT /quotes
    
    sw -> sib: POST /transfers
    sib -> sib: validate ILP
    sib -> esb: POST /transfers
    esb -> backend: accept money?
    
    alt accepting money
    
        backend -> esb: OK
        esb -> sib: OK
        sib -> sib: calculate ILP fulfilment
        sib -> sw: PUT /transfers
        
        sw -> sib: OK notification
        sib -> esb: OK notification
        esb -> backend: money received OK
    
    else not accepting money
    
        backend -> esb: NOK
        esb -> sib: NOK
        sib -> sw: PUT /transfers/{ID}/error
    
    end

== DFSP requests authorization ==
    rnote right of backend #Light
    **""POST /authorizations""**
    ""FSPIOP-Source: DFSP Backend""
    ""FSPIOP-Destination: PISP""
    {      
        "authenticationType": "U2F",
        "retriesLeft": "1",
        "amount": {
            "amount": "100",
            "currency": "USD"
        },
        "transactionId": "987",
        **"transactionRequestId": "123"**,
        "quote": {
            "transferAmount": {
                "amount": "100",
                "currency": "USD"
            },
            "payeeReceiveAmount": {
                "amount": "99",
                "currency": "USD"
            },
            "payeeFspFee": {
                "amount": "1",
                "currency": "USD"
            },
            "expiration": "2020-06-15T12:00:00.000",
            "ilpPacket": "...",
            "condition": "...",
        }
    }
    end note
    backend -> sob: POST /authorizations
    rnote right of sob #Light
    **""POST /authorizations""**
    ""FSPIOP-Source: DFSP Backend""
    ""FSPIOP-Destination: PISP""
    {      
        "authenticationType": "U2F",
        "retriesLeft": "1",
        "amount": {
            "amount": "100",
            "currency": "USD"
        },
        "transactionId": "987",
        **"transactionRequestId": "123"**,
        "quote": {
            "transferAmount": {
                "amount": "100",
                "currency": "USD"
            },
            "payeeReceiveAmount": {
                "amount": "99",
                "currency": "USD"
            },
            "payeeFspFee": {
                "amount": "1",
                "currency": "USD"
            },
            "expiration": "2020-06-15T12:00:00.000",
            "ilpPacket": "...",
            "condition": "...",
        }
    }
    end note
    sob -> sw: POST /authorizations
    sw -> sw: request authorization\nfrom PISP's customer\nvia auth-service 
    rnote left of sw #Light
    **""PUT /authorizations/123""**
    ""FSPIOP-Source: PISP""
    ""FSPIOP-Destination: DFSP Backend""
    {
        "authenticationInfo": {
            "authentication": "U2F",
            "authenticationValue": {
                "pinValue": "<base64 encoded binary - the signed condition>",
                "counter": "1"
            }
        }
        "responseType": "ENTERED"
    }
    end note
    sw -> sob: PUT /authorizations/**123**
    rnote left of sob #Light
    **""Response body of POST /authorizations""**
    {
        "transactionRequestId": "123",
        "authenticationInfo": {
            "authentication": "U2F",
            "authenticationValue": {
                "pinValue": "<base64 encoded binary - the signed condition>",
                "counter": "1"
            }
        }
        "responseType": "ENTERED"
    }
    end note
    sob -> backend: OK authorization details
    backend -> backend: verify authorization
    alt accepting authorization
    backend -> sib: OK: PUT /authorizations/**123**
    sib -> sw: PUT /authorizations/**123**
    else not accepting authorization
    backend -> sib: NOK: PUT /authorizations/**123**/error
    sib -> sw: NOK: PUT /authorizations/**123**/error
    end 
@enduml

